---
description: 
globs: 
alwaysApply: false
---
# 컴포넌트 개발 가이드라인

## 페이지 구조
- 페이지 디렉토리 구조 예시:
  ```
  [page-name]/
  ├── page.tsx              # 페이지 메인 컴포넌트
  ├── _section/             # 페이지 섹션 컴포넌트들
  │   ├── section-a.tsx
  │   ├── section-b.tsx
  │   └── panel/           # 패널 컴포넌트들
  │       ├── detail/      # (예시) 상세 패널
  │       ├── table/       # (예시) 테이블 패널
  │       └── table-v2/    # (예시) 테이블 v2 패널
  ├── _context/            # 페이지 관련 컨텍스트
  │   ├── context-provider.tsx
  │   └── types.ts
  └── README.md            # 페이지 문서화
  ```

## 패널 컴포넌트 구조
- 패널은 섹션 내에서 독립적인 기능을 담당하는 큰 단위의 컴포넌트입니다.
- 각 패널은 다음과 같은 세부 구조를 가집니다:
  ```
  panel/[panel-name]/
  ├── [panel-name].panel.tsx    # 패널 메인 컴포넌트
  ├── modules/                  # 패널 내 모듈 컴포넌트들
  │   ├── a/                    # (예시) 기본 정보 모듈
  │   ├── b/                    # (예시) 문서 관련 모듈
  │   ├── c/                    # (예시) 면접 관련 모듈
  │   ├── d/                    # (예시) 서류 검토 모듈
  │   ├── e/                    # (예시) 채용 UI 모듈
  │   ├── f/                    # (예시) 수습 관련 모듈
  │   └── g/                    # (예시) 드로어 모듈
  ├── dialog/                   # 다이얼로그 컴포넌트들
  │   ├── h/                    # (예시) 면접 관련 다이얼로그
  │   ├── i/                    # (예시) 프로세스 관련 다이얼로그
  │   ├── j/                    # (예시) 수습 관련 다이얼로그
  │   └── k/                    # (예시) 서류 검토 다이얼로그
  ├── _hooks/                   # (예시) 패널 전용 커스텀 훅
  │   └── use-[hook-name].ts
  └── _styles/                  # 패널 전용 스타일
      └── [panel-name].css
  ```

## 컴포넌트 작성 규칙
- 컴포넌트명은 kebab-case로 작성합니다.
- 함수형 컴포넌트를 사용합니다.
- Props는 interface로 정의하고 export 합니다.
- 스타일은 Tailwind CSS 클래스를 사용합니다.
- 복잡한 로직은 커스텀 훅으로 분리합니다.

## 페이지 및 패널 개발 규칙
- `page.tsx`는 페이지의 최상위 컴포넌트로, 페이지 레이아웃과 섹션 컴포넌트들을 조합합니다.
- 섹션 컴포넌트는 `_section` 디렉토리에 위치합니다.
- 패널은 독립적으로 동작할 수 있어야 하며, 패널 내부의 모듈은 기능별로 분리하여 관리합니다.
- 다이얼로그는 패널과 관련된 모달/팝업 컴포넌트입니다.
- 패널 전용 훅은 `_hooks` 디렉토리에, 전용 스타일은 `_styles` 디렉토리에 위치합니다.
- 그 외 필요한 파일들은 필요한 폴더를 생성해서 저장합니다. (ex. utils, core, docs)

## 상태 관리
- 컴포넌트 내부 상태는 useState를 사용합니다.
- 복잡한 상태 로직은 context/provider 패턴을 사용합니다.
- 페이지별 상태 관리는 `_context` 디렉토리에서 관리합니다.

## 접근성
- 모든 인터랙티브 요소는 키보드로 접근 가능해야 합니다.
- 적절한 ARIA 속성을 사용합니다.
- 색상 대비는 WCAG 2.1 기준을 준수합니다.

## 문서화
- 각 페이지는 README.md 파일을 포함해야 합니다.
- README.md에는 다음 내용이 포함되어야 합니다:
  - 페이지의 목적과 기능
  - 주요 컴포넌트 설명
  - 상태 관리 방식
  - API 연동 정보






