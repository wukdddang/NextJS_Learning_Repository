---
description: 
globs: 
alwaysApply: false
---
# 테스트 개발 가이드라인

## 테스트 유형
프로젝트에서는 다음과 같은 테스트 유형을 사용합니다:

### 1. 라우트 핸들러 (어댑터) 포맷팅 단위 테스트
- API 라우트 핸들러와 어댑터 함수의 데이터 포맷팅을 테스트합니다.
- 입력 데이터의 유효성 검사와 출력 데이터의 형식을 확인합니다.
- 에러 처리와 예외 상황에 대한 테스트를 포함합니다.
- 비즈니스 로직의 정확성을 검증합니다.

### 2. 클라이언트 인터랙션 통합 테스트
- 사용자 인터랙션과 API 호출 간의 통합을 테스트합니다.
- 폼 제출, 데이터 검증, 상태 관리 등을 포함합니다.
- 실제 사용자 시나리오를 시뮬레이션합니다.
- 컴포넌트 간의 상호작용과 데이터 흐름을 검증합니다.
- 모든 테스트는 `tests` 디렉토리에 위치합니다.
- 테스트 디렉토리 구조:
  ```
  tests/
  ├── e2e/                # E2E 테스트
  │   ├── calendar/      # 캘린더 관련 E2E 테스트
  │   └── applicant/     # 지원자 관련 E2E 테스트
  ├── test-results/      # 테스트 결과 저장
  ├── playwright-report/ # Playwright 리포트
  └── env.ts            # 테스트 환경 설정
  ```

## 클라이언트 인터랙션 통합 테스트 작성 규칙
- Playwright를 사용하여 클라이언트 인터랙션 통합 테스트를 작성합니다.
- 각 페이지별로 별도의 디렉토리를 만들어 테스트를 구성합니다.
- 테스트 파일명은 `[feature].spec.ts` 형식을 따릅니다.
- 테스트는 독립적으로 실행 가능해야 합니다.

## 클라이언트 인터랙션 통합 테스트 케이스 작성
- 각 테스트는 명확한 시나리오를 가져야 합니다.
- 테스트 설명은 `describe`와 `test` 블록을 사용하여 작성합니다.
- 테스트 데이터는 `test-results` 디렉토리에 저장합니다.
- 실패한 테스트의 스크린샷은 자동으로 저장됩니다.

## 클라이언트 인터랙션 통합 테스트 환경
- `env.ts`에서 테스트 환경 변수를 관리합니다.
- 테스트 실행 전 필요한 데이터를 설정합니다.
- 테스트 실행 후 데이터를 정리합니다.

## 모범 사례
- 각 테스트는 하나의 기능만 테스트합니다.
- 테스트는 재사용 가능한 페이지 객체를 사용합니다.
- 테스트는 실제 사용자 시나리오를 반영합니다.
- 테스트는 안정적이고 신뢰할 수 있어야 합니다.

## 라우트 핸들러 (어댑터) 포맷팅 단위 테스트 작성 규칙

### 테스트 파일 구조
- 테스트 파일명: `[handlerName].test.ts` 또는 `[adapterName].test.ts`
- API 라우트 핸들러는 `app/api/` 디렉토리 내에서 테스트
- 어댑터 함수는 해당 모듈과 같은 디렉토리에서 테스트

### 테스트 케이스 작성
```typescript
import { handler } from './handler';
import { adapter } from './adapter';

describe('Handler/Adapter Name', () => {
  describe('데이터 포맷팅', () => {
    it('should format input data correctly', () => {
      const inputData = { /* 테스트 입력 데이터 */ };
      const expectedOutput = { /* 예상 출력 데이터 */ };
      
      const result = adapter(inputData);
      expect(result).toEqual(expectedOutput);
    });

    it('should handle invalid input data', () => {
      const invalidData = { /* 잘못된 입력 데이터 */ };
      
      expect(() => adapter(invalidData)).toThrow();
    });
  });

  describe('API 응답', () => {
    it('should return correct response format', async () => {
      const mockRequest = { /* 모킹된 요청 객체 */ };
      const mockResponse = { /* 모킹된 응답 객체 */ };
      
      await handler(mockRequest, mockResponse);
      // 응답 형식 검증
    });
  });
});
```

### 모킹 규칙
- HTTP 요청/응답 객체는 완전히 모킹
- 데이터베이스 연결이나 외부 API 호출은 반드시 모킹
- 환경 변수나 설정값도 필요시 모킹

### 검증 포인트
- 입력 데이터 유효성 검사
- 데이터 변환 및 포맷팅 정확성
- 에러 상황 처리 (잘못된 입력, 네트워크 오류 등)
- 응답 상태 코드와 메시지
- 데이터 타입과 구조 검증

### 테스트 데이터 관리
- 테스트 데이터는 별도 파일로 분리하여 관리
- 다양한 시나리오의 테스트 데이터 준비
- 실제 프로덕션 데이터와 유사한 형태로 구성

