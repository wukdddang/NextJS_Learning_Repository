---
description: 
globs: 
alwaysApply: false
---
# API 통신 가이드라인

## 모듈 구조
  ```
  (v2)/
  ├── admin/           # 관리자 관련 API
  ├── base/           # 기본 API 모듈
  ├── interviews/     # 면접 관련 API
  ├── lrim/          # LRIM 관련 API
  └── user/          # 사용자 관련 API
  ```

## 모듈 구성 방식
- 각 모듈은 다음 구조를 따릅니다 (kebab-case 네이밍 사용):
  ```
  [module-name]/
  ├── [module-name].module.ts              # 모듈 클래스 정의 (싱글톤 패턴)
  ├── [module-name].repository.ts          # 레포지토리 구현체
  ├── [module-name].repository.interface.ts # 레포지토리 인터페이스 명세
  ├── entity/                              # 엔티티 정의
  │   └── [module-name].entity.ts         # 도메인 엔티티 타입
  └── dto/                                # 데이터 전송 객체
      └── [module-name].dto.ts            # 요청/응답 DTO 타입
  ```

### 각 파일의 역할
- **Module 파일**: 모듈의 진입점, 싱글톤 인스턴스 관리 및 레포지토리 인스턴스 제공
- **Repository Interface**: 레포지토리의 메서드 명세를 정의하여 타입 안전성 보장
- **Repository Implementation**: 실제 API 호출 로직 구현, 인터페이스를 구현
- **Entity**: 도메인 객체의 타입 정의, 비즈니스 로직과 관련된 데이터 구조
- **DTO**: API 요청/응답을 위한 데이터 전송 객체, 네트워크 통신에 최적화된 구조

## 모듈 패턴
- 모듈 클래스는 싱글톤 패턴을 사용합니다.
- 레포지토리는 인터페이스를 통해 명세를 정의합니다.
- 모든 API 호출은 try-catch로 에러를 처리합니다.
- 모듈 → 레포지토리 → 백엔드 API 순으로 호출됩니다.

## 네이밍 규칙
- 파일명과 디렉토리명, 클래스명, 인터페이스명은 kebab-case를 사용합니다.
- 함수명과 변수명은 camelCase를 사용합니다.
- 상수는 UPPER_SNAKE_CASE를 사용합니다.

## 서버 액션과 라우트 핸들러
- 서버 액션 (`'use server'`)
  - `src/_action` 디렉토리에 위치
  - 클라이언트에서 직접 호출 가능한 서버 함수
  - 모듈의 레포지토리를 호출하여 비즈니스 로직 처리
  - 예시:
    ```typescript
    'use server'
    export async function 지원자_등록(formData: FormData) {
      try {
        const accessToken = await getAccessToken()
        const module = 지원자_모듈.getInstance()
        const repository = module.지원자_레포지토리()
        return await repository.지원자_등록(accessToken, formData)
      } catch (error) {
        // 에러 처리
      }
    }
    ```

- 라우트 핸들러 (`route.ts`)
  - `app/api` 디렉토리에 위치
  - HTTP 요청을 처리하는 API 엔드포인트
  - Next.js의 Route Handlers 사용
  - 예시:
    ```typescript
    export async function POST(req: NextRequest) {
      try {
        const { url, fileName } = await req.json()
        // 파일 처리 로직
        return new NextResponse(fileData, {
          status: 200,
          headers,
        })
      } catch (error) {
        return NextResponse.json({ error: '에러 메시지' }, { status: 500 })
      }
    }
    ```

## API 호출 규칙
- 레포지토리 계층에서 백엔드 API 서버에 연결합니다.
- fetch 함수를 사용하거나 커스텀하게 만든 fetch 함수만을 사용합니다. (다른 라이브러리 사용 X)
- 레포지토리의 각 메서드에서 에러를 처리합니다.
- API 응답은 타입 안전성을 보장합니다.

## 상태 관리
- API 호출의 클라이언트 상태는 SWR을 사용하여 관리합니다.
- 캐시 전략은 각 API의 특성에 맞게 설정합니다.
- 낙관적 업데이트를 적절히 활용합니다.

## 에러 처리
- API 에러는 백엔드에서 발생한 에러 메시지를 그대로 렌더링할 수 있도록 합니다.
- 네트워크 에러는 적절한 폴백 UI를 제공합니다.
- 재시도 로직은 중요도에 따라 구현합니다.







